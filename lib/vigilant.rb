require 'json'
require 'vigilant/test'

class Vigilant
  VERSION = '0.1.1'

  attr_reader :num_tests

  def initialize( test_dir )
    raise "You need to specify a tests directory" unless test_dir
    raise "You need to specify a valid tests directory" unless valid_test_dir(test_dir)
  end

  def generate_tests()
    raise "You need to specify an output path" unless @options['output']
    includes = [] unless @options['includes']

    puts "Generating tests..."
    @num_tests = 0

    Dir.chdir(@project_dir) do
      File.open(@options['output'].dup.untaint, "w") do |out|
        out.write(PROLOGUE)
        includes.each { |include| out.write("#include <#{include}>\n") }

        tests = []
        Dir.glob("**/*.test") do |test|
          next if !File.file?(test)
          tests << test
        end

        @num_tests = tests.length

        run_tests = ""
        tests.each do |file|
          puts "#{file}"

          test = Vigilant::Test.load(file)
          raise "[#{file}] isn't a Vigilant::Test." unless test

          suite = File.dirname(file).split('/').join('_')
          name = File.basename(file, ".test")
          prefix = ""

          if suite.empty?
            prefix = "test_#{name}"
          else
            prefix = "test_#{suite}_#{name}"
          end

          prior_to = "static void " << suite << "_" << name << "__prior_to( void ) {\n"
          prior_to += test.prior_to.untaint
          prior_to += "}\n\n"
          out.write(prior_to)

          run = "static void " << suite << "_" << name << "__run( void ) {\n"
          run += test.run.untaint
          run += "}\n\n"
          out.write(run)

          after = "static void " << suite << "_" << name << "__after( void ) {\n"
          after += test.after.untaint
          after += "}\n\n"
          out.write(after)

          run_tests = run_tests << "
fprintf(stdout, \"Running #{prefix}\\n\");
#{prefix}__prior_to();
if( !setjmp(__vigilant_jb) ) {
  #{prefix}__run();
  ++passed;
} else {
  ret = EXIT_FAILURE;
  fprintf(stdout, \" Failed: %s\\n\", &__test_msg[0]);
}
#{prefix}__after();\n"
        end

        out.write("
int main( int argc, char** argv ) {
  int ret = EXIT_SUCCESS;
  unsigned passed = 0;
  fprintf(stdout, \"Running test suite...\\n\");

  #{run_tests}

  fprintf(stdout, \"\\n%u/%u passed (%%%u).\\n\", passed, (#{@num_tests}), (passed * 100) / (#{@num_tests}));
  return ret;
}\n")
      end
    end

    puts "Generated #{num_tests} tests."
  end

  def valid_test_dir( dir )
    return false if !File.directory?(dir)
    path = File.expand_path(dir)
    @project_dir = File.dirname(path)
    @options = JSON.parse(File.read(File.join(dir, "vigilant.options")))
    true
  end

  PROLOGUE = <<-PROLOGUE
// DO NOT MODIFY
// This file was auto-generated by Vigilant.

#include <stdio.h>
#include <stdlib.h>
#include <setjmp.h>

static jmpbuf __vigilant_jb;
static char __vigilant_msg_buffer[4096];

#define ___vigilant_stringfy( x ) #x
#define __vigilant_stringfy( x ) ___vigilant_stringfy(x)

#undef assert
#define assert( condition ) \
  do { if (!(_condition)) { sprintf(&__vigilant_msg_buffer[0], "'" #_condition "' failed on " __vigilant_stringfy(__LINE__) " in '" __vigilant_stringfy(__FILE__) "'"); longjmp(__vigilant_jb, 0); }} while (0, 0)

#define assert_equal( a, b ) \
  assert((a) == (b))

#define assert_not_equal( a, b ) \
  assert((a) != (b))


PROLOGUE
end